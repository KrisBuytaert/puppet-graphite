### File managed with puppet ###
### Module:           '<%= @module_name %>'
### Template source:  'MODULES<%= template_source.gsub(Regexp.new("^#{Puppet.lookup(:current_environment)[:modulepath].gsub(':','|')}"),"") %>'
#
[cache]
# Configure carbon directories.
#
# OS environment variables can be used to tell carbon where graphite is
# installed, where to read configuration from and where to write data.
#
#   GRAPHITE_ROOT        - Root directory of the graphite installation.
#                          Defaults to ../
#   GRAPHITE_CONF_DIR    - Configuration directory (where this file lives).
#                          Defaults to $GRAPHITE_ROOT/conf/
#   GRAPHITE_STORAGE_DIR - Storage directory for whipser/rrd/log/pid files.
#                          Defaults to $GRAPHITE_ROOT/storage/
#
# To change other directory paths, add settings to this file. The following
# configuration variables are available with these default values:
#
#   STORAGE_DIR    = $GRAPHITE_STORAGE_DIR
#   LOCAL_DATA_DIR = STORAGE_DIR/whisper/
#   WHITELISTS_DIR = STORAGE_DIR/lists/
#   CONF_DIR       = STORAGE_DIR/conf/
#   LOG_DIR        = STORAGE_DIR/log/
#   PID_DIR        = STORAGE_DIR/
#
# For FHS style directory structures, use:
#
#   STORAGE_DIR    = /var/lib/carbon/
#   CONF_DIR       = /etc/carbon/
#   LOG_DIR        = /var/log/carbon/
#   PID_DIR        = /var/run/
#
#LOCAL_DATA_DIR = /opt/graphite/storage/whisper/

STORAGE_DIR    = /var/lib/carbon/
LOCAL_DATA_DIR = /var/lib/carbon/whisper/
WHITELISTS_DIR = /var/lib/carbon/lists/
CONF_DIR       = <%= @carbon_config_dir %>
LOG_DIR        = /var/log/carbon/
PID_DIR        = /var/run/

# Enable daily log rotation. If disabled, a kill -HUP can be used after a manual rotate
ENABLE_LOGROTATION = <%= @carbon_enable_logrotation %>

# Specify the user to drop privileges to
# If this is blank carbon runs as the user that invokes it
# This user must have write access to the local data directory
USER = <%= @carbon_user %>

#
# NOTE: The above settings must be set under [relay] and [aggregator]
#       to take effect for those daemons as well

# Limit the size of the cache to avoid swapping or becoming CPU bound.
# Sorts and serving cache queries gets more expensive as the cache grows.
# Use the value "inf" (infinity) for an unlimited cache size.
MAX_CACHE_SIZE = <%= @carbon_max_cache_size %>

# Limits the number of whisper update_many() calls per second, which effectively
# means the number of write requests sent to the disk. This is intended to
# prevent over-utilizing the disk and thus starving the rest of the system.
# When the rate of required updates exceeds this, then carbon's caching will
# take effect and increase the overall throughput accordingly.
MAX_UPDATES_PER_SECOND = <%= @carbon_max_updates_per_second %>

# If defined, this changes the MAX_UPDATES_PER_SECOND in Carbon when a
# stop/shutdown is initiated.  This helps when MAX_UPDATES_PER_SECOND is
# relatively low and carbon has cached a lot of updates; it enables the carbon
# daemon to shutdown more quickly.
<% if @carbon_max_updates_per_second_on_shutdown_enabled -%>
MAX_UPDATES_PER_SECOND_ON_SHUTDOWN = <%= @carbon_max_updates_per_second_on_shutdown %>
<% end -%>

# Softly limits the number of whisper files that get created each minute.
# Setting this value low (like at 50) is a good way to ensure your graphite
# system will not be adversely impacted when a bunch of new metrics are
# sent to it. The trade off is that it will take much longer for those metrics'
# database files to all get created and thus longer until the data becomes usable.
# Setting this value high (like "inf" for infinity) will cause graphite to create
# the files quickly but at the risk of slowing I/O down considerably for a while.
MAX_CREATES_PER_MINUTE = <%= @carbon_max_creates_per_minute %>

LINE_RECEIVER_INTERFACE = <%= @carbon_line_receiver_interface %>

# Set this to True to enable the UDP listener. By default this is off
# because it is very common to run multiple carbon daemons and managing
# another (rarely used) port for every carbon instance is not fun.
ENABLE_UDP_LISTENER = <%= @carbon_enable_udp_listerner %>
UDP_RECEIVER_INTERFACE = <%= @carbon_udp_receiver_interface %>

PICKLE_RECEIVER_INTERFACE = <%= @carbon_pickle_receiver_interface %>

# Set to false to disable logging of successful connections
LOG_LISTENER_CONNECTIONS = <%= @carbon_log_listener_connections %>

# Per security concerns outlined in Bug #817247 the pickle receiver
# will use a more secure and slightly less efficient unpickler.
# Set this to True to revert to the old-fashioned insecure unpickler.
USE_INSECURE_UNPICKLER = <%= @carbon_use_insecure_unpickler %>

CACHE_QUERY_INTERFACE = <%= @carbon_cache_query_interface %>

# Set this to False to drop datapoints received after the cache
# reaches MAX_CACHE_SIZE. If this is True (the default) then sockets
# over which metrics are received will temporarily stop accepting
# data until the cache size falls below 95% MAX_CACHE_SIZE.
USE_FLOW_CONTROL = <%= @carbon_use_flow_control %>

# By default, carbon-cache will log every whisper update and cache hit. This can be excessive and
# degrade performance if logging on the same volume as the whisper data is stored.
LOG_UPDATES = <%= @carbon_log_updates %>
LOG_CACHE_HITS = <%= @carbon_log_cache_hits %>
LOG_CACHE_QUEUE_SORTS = <%= @carbon_log_cache_queu_sorts %>

# The thread that writes metrics to disk can use on of the following strategies
# determining the order in which metrics are removed from cache and flushed to
# disk. The default option preserves the same behavior as has been historically
# available in version 0.9.10.
#
# sorted - All metrics in the cache will be counted and an ordered list of
# them will be sorted according to the number of datapoints in the cache at the
# moment of the list's creation. Metrics will then be flushed from the cache to
# disk in that order.
#
# max - The writer thread will always pop and flush the metric from cache
# that has the most datapoints. This will give a strong flush preference to
# frequently updated metrics and will also reduce random file-io. Infrequently
# updated metrics may only ever be persisted to disk at daemon shutdown if
# there are a large number of metrics which receive very frequent updates OR if
# disk i/o is very slow.
#
# naive - Metrics will be flushed from the cache to disk in an unordered
# fashion. This strategy may be desirable in situations where the storage for
# whisper files is solid state, CPU resources are very limited or deference to
# the OS's i/o scheduler is expected to compensate for the random write
# pattern.
#
CACHE_WRITE_STRATEGY = <%= @carbon_cache_write_strategy %>

# On some systems it is desirable for whisper to write synchronously.
# Set this option to True if you'd like to try this. Basically it will
# shift the onus of buffering writes from the kernel into carbon's cache.
WHISPER_AUTOFLUSH = <%= @carbon_whisper_autoflush %>

# By default new Whisper files are created pre-allocated with the data region
# filled with zeros to prevent fragmentation and speed up contiguous reads and
# writes (which are common). Enabling this option will cause Whisper to create
# the file sparsely instead. Enabling this option may allow a large increase of
# MAX_CREATES_PER_MINUTE but may have longer term performance implications
# depending on the underlying storage configuration.
<% if @carbon_whisper_sparse_create -%>
WHISPER_SPARSE_CREATE = <%= @carbon_whisper_sparse_create %>
<% end -%>

# Only beneficial on linux filesystems that support the fallocate system call.
# It maintains the benefits of contiguous reads/writes, but with a potentially
# much faster creation speed, by allowing the kernel to handle the block
# allocation and zero-ing. Enabling this option may allow a large increase of
# MAX_CREATES_PER_MINUTE. If enabled on an OS or filesystem that is unsupported
# this option will gracefully fallback to standard POSIX file access methods.
WHISPER_FALLOCATE_CREATE = <%= @carbon_whisper_fallocate_create %>

# Enabling this option will cause Whisper to lock each Whisper file it writes
# to with an exclusive lock (LOCK_EX, see: man 2 flock). This is useful when
# multiple carbon-cache daemons are writing to the same files
<% if @carbon_whisper_lock_writes -%>
WHISPER_LOCK_WRITES = <%= @carbon_whisper_lock_writes %>
<% end -%>

# Set this to True to enable whitelisting and blacklisting of metrics in
# CONF_DIR/whitelist and CONF_DIR/blacklist. If the whitelist is missing or
# empty, all metrics will pass through
<% if @carbon_use_whitelist -%>
USE_WHITELIST = <%= @carbon_use_whitelist %>
<% end -%>

# By default, carbon itself will log statistics (such as a count,
# metricsReceived) with the top level prefix of 'carbon' at an interval of 60
# seconds. Set CARBON_METRIC_INTERVAL to 0 to disable instrumentation
<% if @carbon_carbon_metric_prefix -%>
  CARBON_METRIC_PREFIX = <%= @carbon_carbon_metric_prefix %>
<% end -%>
<% if @carbon_carbon_metric_interval -%>
CARBON_METRIC_INTERVAL = <%= @carbon_carbon_metric_interval %>
<% end -%>

# Enable AMQP if you want to receve metrics using an amqp broker
<% if @carbon_enable_amqp != 'False' %>
ENABLE_AMQP = <%= @carbon_enable_amqp %>

# Verbose means a line will be logged for every metric received
# useful for testing
AMQP_VERBOSE = <%= @carbon_amqp_verbose %>

AMQP_HOST = <%= @carbon_amqp_host %>
AMQP_PORT = <%= @carbon_amqp_port %>
AMQP_VHOST = <%= @carbon_amqp_vhost %>
AMQP_USER = <%= @carbon_ampq_user %>
AMQP_PASSWORD = <%= @carbon_amqp_password %>
AMQP_EXCHANGE = <%= @carbon_amqp_exchange %>
AMQP_METRIC_NAME_IN_BODY = <%= @caron_metric_name_in_body %>
<% end -%>

# The manhole interface allows you to SSH into the carbon daemon
# and get a python interpreter. BE CAREFUL WITH THIS! If you do
# something like time.sleep() in the interpreter, the whole process
# will sleep! This is *extremely* helpful in debugging, assuming
# you are familiar with the code. If you are not, please don't
# mess with this, you are asking for trouble :)
#
# ENABLE_MANHOLE = False
# MANHOLE_INTERFACE = 127.0.0.1
# MANHOLE_PORT = 7222
# MANHOLE_USER = admin
# MANHOLE_PUBLIC_KEY = ssh-rsa AAAAB3NzaC1yc2EAAAABiwAaAIEAoxN0sv/e4eZCPpi3N3KYvyzRaBaMeS2RsOQ/cDuKv11dlNzVeiyc3RFmCv5Rjwn/lQ79y0zyHxw67qLyhQ/kDzINc4cY41ivuQXm2tPmgvexdrBv5nsfEpjs3gLZfJnyvlcVyWK/lId8WUvEWSWHTzsbtmXAF2raJMdgLTbQ8wE=

# Patterns for all of the metrics this machine will store. Read more at
# http://en.wikipedia.org/wiki/Advanced_Message_Queuing_Protocol#Bindings
#
# Example: store all sales, linux servers, and utilization metrics
# BIND_PATTERNS = sales.#, servers.linux.#, #.utilization
#
# Example: store everything
# BIND_PATTERNS = #
<% if @carbon_bind_patterns -%>
BIND_PATTERNS = <%= @carbon_bind_patterns %>
<% end -%>

# To configure special settings for the carbon-cache instance 'b', uncomment this:
#[cache:b]
#LINE_RECEIVER_PORT = 2103
#PICKLE_RECEIVER_PORT = 2104
#CACHE_QUERY_PORT = 7102
# and any other settings you want to customize, defaults are inherited
# from [carbon] section.
# You can then specify the --instance=b option to manage this instance
<%-
for a in 1..@carbon_cache_amount.to_i do
  if @carbon_cache_amount.to_i > 1 -%>
[cache:<%= a %>]
  <%- end -%>
LINE_RECEIVER_PORT = <%= @carbon_line_receiver_port.to_i + 10*a - 10 %>
UDP_RECEIVER_PORT = <%= @carbon_udp_receiver_port.to_i + 10*a - 10%>
PICKLE_RECEIVER_PORT = <%= @carbon_pickle_receiver_port.to_i + 10*a - 10%>
CACHE_QUERY_PORT = <%= @carbon_cache_query_port.to_i + 10*a - 10%>

<% end -%>
